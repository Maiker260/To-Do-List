{"version":3,"file":"app.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AAC0G;AACjB;AACzF,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA;AACA,UAAU,OAAO,gFAAgF,iFAAiF,mBAAmB;AACrM;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;ACR1B;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,gDAAgD;AAChD;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA;AACA;;;;;;;ACfa;;AAEb;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnFa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjCa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;AACjF;AACA;AACA;AACA;AACA;;;;;;;ACTa;;AAEb;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5Da;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;ACfA;AACe;;AAEf;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;ACrBqC;AACa;;AAElD;AACe;;AAEf;AACA;;AAEA;AACA,uBAAuB,gBAAgB;;AAEvC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;ACjC4D;AACK;;AAEjE;AACe;;AAEf;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,KAAK;;AAEL;AACA,wBAAwB,qBAAqB;;AAE7C;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AC9BA;AACe;AACf;AACA;AACA;AACA;;ACLkD;;AAElD;AACe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;;AAEA,uBAAuB,gBAAgB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AClEA;AACe;;AAEf;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA,aAAa;AACb;;ACpBwC;AACU;AACc;;AAEhE;AACe;;AAEf,uBAAuB,gBAAgB;AACvC,yBAAyB,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,WAAW;AACjC,qBAAqB,WAAW;AAChC,sBAAsB,WAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AChKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,6DAAe,6DAAa,IAAC;;;ACvCuB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0BAA0B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,aAAa;AACtB;;AAEA;AACA,4DAAe,4DAAY,IAAC;;;ACrC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA,sDAAe,sDAAM,IAAC;;;ACzDgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA,0DAAe,0DAAU,IAAC;;;AC7BoB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,6BAA6B,UAAU;AACvC,8BAA8B,UAAU;;AAExC;AACA;;AAEA;AACA,yDAAe,yDAAS,IAAC;;;ACxCyB;AACN;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,SAAS,OAAO,YAAY;AACrC;;AAEA;AACA,uDAAe,uDAAO,IAAC;;;AC5BvB;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;;ACRsC;AACwB;;AAE9D;AACA,QAAQ,mBAAmB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACO;AACP,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,MAAM;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2DAAe,2DAAW,IAAC;;;ACpDqB;;AAEhD;AACA,QAAQ,kBAAkB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B,WAAW;AACzC,+BAA+B,WAAW;;AAE1C;AACA;;AAEA;AACA,0DAAe,0DAAU,IAAC;;;AChDwB;AACJ;;AAE9C;AACA,QAAQ,kBAAkB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACO;AACP,SAAS,UAAU,OAAO,YAAY;AACtC;;AAEA;AACA,0DAAe,0DAAU,IAAC;;;ACvCQ;AACe;AACF;AACH;;AAE7B;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;;;AAGA;AACA,IAAI,aAAa,CAAC,SAAS;AAC3B,eAAe,SAAS;AACxB,QAAQ,aAAa;AACrB,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA,WAAW,UAAU,sBAAsB,iBAAiB;AAC5D;;ACrDkD;;AAElD;AACe;;AAEf;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,YAAY,WAAW;AACvB;AACA;;AAEA;;ACvBkC;AACU;AACK;;AAEjD;AACe;AACf;AACA;;AAEA;AACA,IAAI,aAAa,CAAC,SAAS;AAC3B,IAAI,yBAAU,CAAC,SAAS;AACxB,QAAQ,aAAa;AACrB,KAAK;AACL;;AAEA,SAAS,yBAAU;AACnB;AACA;;AClBwD;AACA;;AAExD;AACe;;AAEf;AACA,IAAI,mBAAmB;AACvB,IAAI,cAAc;AAClB;;ACTA;AACe;AACf;AACA;AACA;;ACJgD;;AAEhD;AACO;;AAEP;AACA;AACA,qCAAqC,WAAW;AAChD;;AAEA;AACA;AACA,wCAAwC,cAAc;AACtD;;AAEA,aAAa;AACb;;AAEA;AACO;;AAEP;AACA;AACA,QAAQ,SAAS;AACjB,QAAQ,YAAY;AACpB;;AAEA,aAAa;AACb;;AAEA;AACO;;AAEP;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA,gBAAgB,SAAS;AACzB,cAAc;AACd;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AC7CsD;AACpB;AACU;AACmC;AACV;AACN;;AAE/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,SAAS;;AAEjB;AACA,QAAQ,aAAa,CAAC,SAAS;;AAE/B;AACA,QAAQ,uBAAuB;;AAE/B;AACA,QAAQ,uBAAuB;;AAE/B;AACA,QAAQ,4BAA4B;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,qBAAO;;AAEb,kBAAkB;AAClB;AACA;AACA;AACA,IAAI,qBAAO;AACX;;AAEA,6DAAe,qEAAO,IAAC;;;ACnGiB;AACU;;AAElD;AACe;;AAEf;;AAEA,uBAAuB,gBAAgB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,WAAW;AACjC,qBAAqB,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;ACrFsD;AACC;AAClB;AACgC;AACzB;AACmC;AAChB;;AAE/D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,yBAAyB;AACxC;;AAEA;AACA,QAAQ,YAAY;;AAEpB;AACA,QAAQ,aAAa,CAAC,YAAY;;AAElC;AACA,QAAQ,uBAAuB;;AAE/B;AACA,QAAQ,uBAAuB;;AAE/B;AACA,QAAQ,4BAA4B;;AAEpC;AACA;;AAEA;AACA,QAAQ,gBAAgB;AACxB;;AAEA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,YAAY;AAChC,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,2BAAU;;AAEhB,kBAAkB;AAClB;AACA;AACA;AACA,IAAI,2BAAU;AACd;;AAEA,gEAAe,2EAAU;;AC7FzB;AACe;AACf;AACA;AACA;AACA;;ACLwD;AACQ;AACV;;AAEtD;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC,gBAAgB,uBAAuB;AACvC,gBAAgB,mBAAmB;AACnC,aAAa;AACb;AACA,KAAK;AACL;;ACzB+C;AACH;AACM;AAC6B;;AAE/E;AACe;;AAEf;AACA,QAAQ,6BAA6B;AACrC;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,QAAQ,aAAa,IAAI,SAAS,UAAU,SAAS,aAAa,SAAS;AAC3E;AACA,oBAAoB,YAAY;AAChC,QAAQ,gBAAgB,IAAI,YAAY;AACxC;AACA;;ACrBA;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;ACrCA;AACe;AACf;AACA;AACA;;ACJ6D;AACb;AACJ;AACW;AACM;AACF;AACoB;AACV;;AAErE;AACe;;AAEf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,YAAY;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,YAAY;AACvB;;AAEA;AACA,WAAW,SAAS;AACpB;;AAEA;AACA,IAAI,aAAa,CAAC,YAAY;AAC9B;AACA,IAAI,mBAAmB;AACvB,IAAI,YAAY;AAChB,QAAQ,gBAAgB;AACxB,KAAK;AACL;;AAEA;AACA,IAAI,kBAAkB;AACtB,IAAI,uBAAuB;AAC3B,IAAI,4BAA4B;AAChC;;ACxGgE;AACV;AACE;;AAExD;AACe;AACf;AACA;AACA,QAAQ,kBAAkB;AAC1B,QAAQ,uBAAuB;AAC/B,QAAQ,cAAc;AACtB;AACA;;ACZ6D;AACL;AACc;AAChB;AACoB;;AAE1E;AACe;;AAEf,wBAAwB,iBAAiB;AACzC;AACA,gCAAgC,mBAAmB;AACnD;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wBAAwB;AACpC,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,qBAAqB;AAC7B,KAAK;AACL;;ACzCkC;;AAElC;AACe;;AAEf;AACA;AACA;AACA,6BAA6B,SAAS;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB;;AC/GuD;AACU;AAC/B;AACoB;AACyB;AACV;AACL;;AAEhE;AACe;;AAEf,uBAAuB,gBAAgB;AACvC,uBAAuB,kBAAkB;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY,wBAAwB;AACpC,YAAY,uBAAuB;AACnC,YAAY,4BAA4B;AACxC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B,SAAS,CAAC,4BAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,SAAS,QAAQ,4BAAa;AAC1C;AACA,YAAY,wBAAwB;AACpC,UAAU;AACV;AACA;AACA;;AAEA,aAAa;AACb;;AAEA,SAAS,4BAAa;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA,WAAW,SAAS;AACpB;;;AC5GwD;AACc;AAChB;AACpB;AACwC;AACV;AACT;AACmB;;AAE1E;AACe;;AAEf,qBAAqB,cAAc;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,QAAQ,aAAa,CAAC,SAAS;AAC/B;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA,QAAQ,uBAAuB;AAC/B,QAAQ,4BAA4B;AACpC,KAAK;;AAEL;AACA;AACA;AACA;AACA,QAAQ,aAAa,CAAC,SAAS;AAC/B;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA,QAAQ,uBAAuB;AAC/B,QAAQ,4BAA4B;AACpC,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,QAAQ,qBAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,qBAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,qBAAqB;AAC7B,KAAK;AACL;;;ACvEA;AACe;;AAEf;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpBA,MAA+F;AAC/F,MAAqF;AACrF,MAA4F;AAC5F,MAA+G;AAC/G,MAAwG;AACxG,MAAwG;AACxG,MAA6N;AAC7N;AACA;;AAEA;;AAEA,4BAA4B,6BAAmB;AAC/C,wBAAwB,0CAAa;AACrC,iBAAiB,+BAAa;AAC9B,iBAAiB,uBAAM;AACvB,6BAA6B,8BAAkB;;AAE/C,aAAa,kCAAG,CAAC,oBAAO;;;;AAIuK;AAC/L,OAAO,gDAAe,oBAAO,IAAI,oBAAO,UAAU,oBAAO,mBAAmB,EAAC;;;ACxB7E;AACuD;AACM;AACO;AAClB;AACgB;AACN;AACqB;;AAEjF;AACqB;;;AAGrB;AACO;AACA;;AAEP;AACA,uBAAuB,uDAAO;;AAE9B;AACA,iBAAiB,eAAe;;AAEhC;AACA,0BAA0B,0DAAU;;AAEpC;AACA,oBAAoB,kBAAkB;;AAEtC;AACA,8BAA8B,mBAAmB;;AAEjD;AACA,oBAAoB,uBAAuB;;AAE3C;AACA,oBAAoB,YAAY","sources":["webpack://to-do-list/./src/style.css?fd51","webpack://to-do-list/./node_modules/css-loader/dist/runtime/api.js","webpack://to-do-list/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://to-do-list/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://to-do-list/./src/scripts/Features/clickingOutsideModals.js","webpack://to-do-list/./src/scripts/DOM/createElementDOM.js","webpack://to-do-list/./src/scripts/DOM/showProjectsAvailable.js","webpack://to-do-list/./src/scripts/Features/BtnEventsListeners.js","webpack://to-do-list/./src/scripts/Features/reAssignIndex.js","webpack://to-do-list/./src/scripts/DOM/createIcons.js","webpack://to-do-list/./src/scripts/Features/TaskCompleteStatus.js","webpack://to-do-list/./src/scripts/DOM/createTaskDOM.js","webpack://to-do-list/./node_modules/date-fns/constructFrom.mjs","webpack://to-do-list/./node_modules/date-fns/constructNow.mjs","webpack://to-do-list/./node_modules/date-fns/toDate.mjs","webpack://to-do-list/./node_modules/date-fns/startOfDay.mjs","webpack://to-do-list/./node_modules/date-fns/isSameDay.mjs","webpack://to-do-list/./node_modules/date-fns/isToday.mjs","webpack://to-do-list/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://to-do-list/./node_modules/date-fns/startOfWeek.mjs","webpack://to-do-list/./node_modules/date-fns/isSameWeek.mjs","webpack://to-do-list/./node_modules/date-fns/isThisWeek.mjs","webpack://to-do-list/./src/scripts/Features/filterTasks.js","webpack://to-do-list/./src/scripts/DOM/taskSectionSelected.js","webpack://to-do-list/./src/scripts/Features/filterProjects.js","webpack://to-do-list/./src/scripts/DOM/checkCurrentTaskSectionTitle.js","webpack://to-do-list/./src/scripts/DOM/clearMainSectionContent.js","webpack://to-do-list/./src/scripts/Features/DataInLocalStorage.js","webpack://to-do-list/./src/scripts/Features/createNewTask.js","webpack://to-do-list/./src/scripts/DOM/createProjectDOM.js","webpack://to-do-list/./src/scripts/Features/createNewProject.js","webpack://to-do-list/./src/scripts/DOM/changeCurrentTitle.js","webpack://to-do-list/./src/scripts/DOM/replaceTasksContent.js","webpack://to-do-list/./src/scripts/DOM/DOMLoads.js","webpack://to-do-list/./src/scripts/DOM/handleProjectModals.js","webpack://to-do-list/./src/scripts/DOM/clearProjectSection.js","webpack://to-do-list/./src/scripts/Features/manageProjecBtns.js","webpack://to-do-list/./src/scripts/DOM/showTasksinProject.js","webpack://to-do-list/./src/scripts/DOM/projectBtnsHandler.js","webpack://to-do-list/./src/scripts/DOM/handleTaskModals.js","webpack://to-do-list/./src/scripts/Features/manageTaskBtns.js","webpack://to-do-list/./src/scripts/DOM/taskBtnsHandler.js","webpack://to-do-list/./src/scripts/Features/manageMobileViewSidebar.js","webpack://to-do-list/./src/style.css?3252","webpack://to-do-list/./src/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","   // Function to allow the user to close the Modal when clicking outside it.\nexport default function clickingOutsideModals() {\n    function closeModal(e, dialog) {\n        const dialogDimensions = dialog.getBoundingClientRect()\n        if (\n            e.clientX < dialogDimensions.left ||\n            e.clientX > dialogDimensions.right ||\n            e.clientY < dialogDimensions.top ||\n            e.clientY > dialogDimensions.bottom\n        ) {\n            dialog.close()\n        }\n    }\n\n    return { closeModal }\n}","// Function to create a DOM element with a class/attribute easier.\nexport default function createElementDOM() {\n\n    function createElementWithClasses(tag, classes) {\n        const element = document.createElement(tag)\n        if (classes === undefined) {\n            return element;\n        } else {\n            // If the \"classes\" property is an array, it will add all the classes. \n            element.classList.add(...classes);\n            return element;\n        }\n    }\n    \n    function assignAttributes(element, attributes) {\n        for (let value in attributes) {\n            element.setAttribute(value, attributes[value]);\n        }\n    }\n\n    return { createElementWithClasses, assignAttributes }\n}","import { projectsList } from \"../..\";\nimport createElementDOM from \"./createElementDOM\";\n\n// Shows Projects available in the \"Project\" Dropdown menu in the New Task Section.\nexport default function showProjectsAvailable(modal) {\n\n    // Clear All Options from the List.\n    clearSelectOptions(modal);\n\n    const newTaskProjectList = document.querySelector(modal);\n    const newElement = createElementDOM();\n\n    const defaultOption = newElement.createElementWithClasses(\"option\");\n    defaultOption.value = \"default\"\n    newElement.assignAttributes(defaultOption, {\n        selected: true,\n        disabled: true\n    });\n    defaultOption.textContent = \"Select a Project\";\n    newTaskProjectList.appendChild(defaultOption)\n\n    // Create the Project Name Option in the Project List.\n    projectsList.forEach(project => {\n        const projectName = newElement.createElementWithClasses(\"option\");\n        projectName.value = project.name;\n        projectName.textContent = project.name;\n        newTaskProjectList.appendChild(projectName)\n    });\n}\n\nfunction clearSelectOptions(modal) {\n    const newTaskProjectList = document.querySelector(modal)\n    newTaskProjectList.textContent = \"\";\n}","import clickingOutsideModals from \"./clickingOutsideModals\";\nimport showProjectsAvailable from \"../DOM/showProjectsAvailable\";\n\n// Function to add the Event Listeners to the DOM easier.\nexport default function BtnEventsListeners(modalSelector, btnSelector, createEditBtnSelector, createEditFunction) {\n\n    const modal = document.querySelector(modalSelector);\n    const openBtn = document.querySelector(btnSelector);\n\n    // Open Modal.\n    openBtn.addEventListener(\"click\", () => {\n        modal.showModal();\n        // Show Available Projects in New Task Modal.\n        showProjectsAvailable(\"#new_task_project\");\n    });\n\n    // Close the Modal when clicking outside it.\n    const clickModals = clickingOutsideModals()\n\n    modal.addEventListener(\"click\", (e) => {\n        clickModals.closeModal(e, modal);\n    });\n\n    // Create/Edit Element and add it to the List Container.\n    document.querySelector(createEditBtnSelector).addEventListener(\"click\", e => {\n        e.preventDefault();\n        createEditFunction();\n        modal.close();\n    });\n    \n}","// Assign a new Index Value, in case that a Task/Project was deleted before.\nexport default function reAssignIndex(list) {\n    for (const i in list) {\n        list[i].index = i;\n    }\n}","import createElementDOM from \"./createElementDOM\";\n\n// Function to make the DOM Icons creation easier.\nexport default function createIcons(iconID, dataIcon, index, name) {\n\n    const editSvg = createSvgIconTemplate(\n        \"interactive_icons main_content_section_task_icon pointer\",\n        \"m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z\",\n        iconID,\n        dataIcon,\n        index,\n        name\n    )\n    \n    const deleteSvg = createSvgIconTemplate(\n        \"interactive_icons main_content_section_task_icon pointer\",\n        \"M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z\",\n        iconID,\n        dataIcon,\n        index,\n        name\n    )\n\n    const infoSvg = createSvgIconTemplate(\n        \"interactive_icons main_content_section_task_icon pointer\",\n        \"M10 11h2v5m-2 0h4m-2.592-8.5h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\",\n        iconID,\n        dataIcon,\n        index,\n        name\n    )\n\n    return { editSvg, deleteSvg, infoSvg };\n}\n\nfunction createSvgIconTemplate(classes, pathData, iconID, dataIcon, index, name) {\n\n    const newElement = createElementDOM();\n\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    newElement.assignAttributes(svg, {\n        class: classes,\n        \"aria-hidden\": \"true\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"24\",\n        height: \"24\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\"\n    });\n\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    newElement.assignAttributes(path, {\n        stroke: \"currentColor\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        \"stroke-width\": \"2\",\n        \"d\": pathData,\n        id: iconID,\n        \"data-icon\": dataIcon,\n        \"data-index\": index,\n        \"data-name\": name\n    });\n\n    svg.appendChild(path);\n\n    return svg;\n}","// Function to check the current Task Status.\nexport default function taskCompleteStatus() {\n\n    function checkTaskStatus(task) {\n        if (task) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function changeTaskStatus(task) {\n        if (checkTaskStatus(task.completed)) {\n            task.completed = false;\n        } else if (!checkTaskStatus(task.completed)) {\n            task.completed = true;\n        }\n    }\n\n    return { checkTaskStatus, changeTaskStatus }\n}","import createIcons from \"./createIcons\";\nimport createElementDOM from \"./createElementDOM\";\nimport taskCompleteStatus from \"../Features/TaskCompleteStatus\";\n\n// Function to create the Task into the DOM.\nexport default function createTaskDOM(index, taskName, dueDate, taskStatus) {\n\n    const newElement = createElementDOM();\n    const taskComplete = taskCompleteStatus();\n\n    // Task Main Container\n    const taskContainer = newElement.createElementWithClasses(\"article\", [\n        \"main_content_section_individual_task\",\n        \"flex\",\n        \"current_option\"\n        ]\n    )\n    newElement.assignAttributes(taskContainer, {\n        id: taskName + \"-\" + index,\n        \"data-index\": index,\n        \"data-name\": taskName + \"-\" + index,\n        \"data-title\": taskName\n        }\n    );\n\n    // New Task Left Section\n    const taskDivContainerLeftSection = newElement.createElementWithClasses(\"div\", [ \n        \"main_content_section_task_description_left\",\n        \"flex\"\n        ]\n    );\n\n        // Checkbox\n    const taskCheckbox = newElement.createElementWithClasses(\"input\", [\n        \"main_content_section_task_checkbox\",\n        \"interactive_icons\",\n        \"pointer\"\n        ]\n    );\n    newElement.assignAttributes(taskCheckbox, {\n        type: \"checkbox\",\n        name: `task_checkbox${index}`,\n        id: `task${index}`,\n        \"data-icon\": \"checkbox\",\n        \"data-index\": index\n        }\n    );\n\n        // Task Title\n    const taskLabel = newElement.createElementWithClasses(\"label\", [\n        \"main_content_section_task_description_text\",\n        \"pointer\"\n        ]\n    );\n    newElement.assignAttributes(taskLabel, {\n        for: `task${index}`,\n        \"data-name\": taskName + \"-\" + index,\n        \"data-title\": taskName,\n        \"data-type\": \"Task Container\",\n        \"data-index\": index\n        }\n    );\n    \n    const taskLabelText = newElement.createElementWithClasses(\"p\", [\n        \"main_content_section_task_description_text_content\"\n    ]);\n    taskLabelText.textContent = taskName;\n    newElement.assignAttributes(taskLabelText, {\n        \"data-name\": taskName + \"-\" + index,\n        \"data-title\": taskName,\n        \"data-type\": \"Task Container\",\n        \"data-index\": index\n        }\n    );\n    taskLabel.appendChild(taskLabelText);\n\n        // Append Task Details to Task Left Container \n    taskDivContainerLeftSection.appendChild(taskCheckbox);\n    taskDivContainerLeftSection.appendChild(taskLabel);\n\n\n    // New Task Right Section\n    const taskDivContainerRightSection = newElement.createElementWithClasses(\"div\", [\n        \"main_content_section_task_description_right\",\n        \"flex\"\n        ]\n    );\n\n        // Due Date\n    const taskDueDate = newElement.createElementWithClasses(\"p\", [\n        \"main_content_section_task_due_date\"\n        ]\n    );\n    taskDueDate.textContent = dueDate;\n\n        // Add more styles if the Task is Completed\n    if (taskComplete.checkTaskStatus(taskStatus)) {\n        taskLabelText.classList.add(\"task_completed\");\n        taskDueDate.classList.add(\"task_completed\");\n        taskCheckbox.checked = true;\n    }\n\n        // Icons Container\n    const taskRightIconsDivContainer = newElement.createElementWithClasses(\"div\", [\n        \"main_content_section_task_description_right_icons\",\n        \"flex\"\n        ]\n    );\n    newElement.assignAttributes(taskRightIconsDivContainer, {\n        \"data-name\": taskName + \"-\" + index,\n        \"data-title\": taskName\n        }        \n    );\n    \n        // Append Icons to Container\n    const editTaskBtnID = \"editTaskBtn\" + \"_\" + taskName + \"_\" + index;\n    const editTaskDataIcon = \"edit\";\n    const deleteTaskBtnID = \"deleteTaskBtn\" + \"_\" + taskName + \"_\" + index;\n    const delTaskDataIcon = \"delete\";\n    const infoTaskBtnID = \"infoTaskBtn\" + \"_\" + taskName + \"_\" + index;\n    const infoTaskDataIcon = \"info\";\n\n    const editIcons = createIcons(editTaskBtnID, editTaskDataIcon, index, taskName);\n    const delIcons = createIcons(deleteTaskBtnID, delTaskDataIcon, index, taskName);\n    const infoIcons = createIcons(infoTaskBtnID, infoTaskDataIcon, index, taskName);\n\n    newElement.assignAttributes(editIcons.editSvg, {\n        id: editTaskBtnID,\n        \"data-icon\": editTaskDataIcon,\n        \"data-index\": index,\n        \"data-name\": taskName\n    });\n    newElement.assignAttributes(delIcons.deleteSvg, {\n        id: deleteTaskBtnID,\n        \"data-icon\": delTaskDataIcon,\n        \"data-index\": index,\n        \"data-name\": taskName\n    });\n    newElement.assignAttributes(infoIcons.infoSvg, {\n        id: infoTaskBtnID,\n        \"data-icon\": infoTaskDataIcon,\n        \"data-index\": index,\n        \"data-name\": taskName\n    });\n    taskRightIconsDivContainer.appendChild(editIcons.editSvg);\n    taskRightIconsDivContainer.appendChild(delIcons.deleteSvg);\n    taskRightIconsDivContainer.appendChild(infoIcons.infoSvg);\n\n        // Append Task Details to Task Right Container\n    taskDivContainerRightSection.appendChild(taskDueDate);\n    taskDivContainerRightSection.appendChild(taskRightIconsDivContainer);\n\n    //Append Sections to Task Main Container\n\n    taskContainer.appendChild(taskDivContainerLeftSection);\n    taskContainer.appendChild(taskDivContainerRightSection);\n\n    // Append Task to the DOM\n    const listContainer = document.querySelector(\"#main_content_section_task_list_container\");\n    listContainer.appendChild(taskContainer);\n}","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * The {@link isSameWeek} function options.\n */\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same week (and month and year)\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nexport function isSameWeek(dateLeft, dateRight, options) {\n  const dateLeftStartOfWeek = startOfWeek(dateLeft, options);\n  const dateRightStartOfWeek = startOfWeek(dateRight, options);\n\n  return +dateLeftStartOfWeek === +dateRightStartOfWeek;\n}\n\n// Fallback for modularized imports:\nexport default isSameWeek;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameWeek } from \"./isSameWeek.mjs\";\n\n/**\n * The {@link isThisWeek} function options.\n */\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param options - The object with options\n *\n * @returns The date is in this week\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\nexport function isThisWeek(date, options) {\n  return isSameWeek(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default isThisWeek;\n","import { tasksList } from \"../..\";\nimport createTaskDOM from \"../DOM/createTaskDOM\";\nimport { isToday, isThisWeek } from \"date-fns\";\nimport reAssignIndex from \"./reAssignIndex\";\n\nexport default function filterTasks() {\n    function allTasks() {\n        filterAndCreateTasks(task => !task.completed)\n    }\n\n    function todayTask() {\n        filterAndCreateTasks(task => isTodayTaskFilter(task.dueDate) && !task.completed);\n    }\n\n    function thisWeekTask() {\n        filterAndCreateTasks(task => isThisWeekTaskFilter(task.dueDate) && !task.completed);\n    }\n\n    function urgentTasks() {\n        filterAndCreateTasks(task => task.priority === \"Urgent\" && !task.completed);\n    }\n\n    function completedTasks() {\n        filterAndCreateTasks(task => task.completed);\n    }\n\n    return { allTasks, todayTask, thisWeekTask, urgentTasks, completedTasks }\n}\n\n\nfunction filterAndCreateTasks(filter) {\n    reAssignIndex(tasksList);\n    filterList(tasksList, filter).forEach(task => {\n        createTaskDOM(task.index, task.name, task.dueDate, task.completed);\n    });\n}\n\nfunction filterList(array, criteria) {\n    return array.filter(criteria);\n}\n\nfunction convertDate(date) {\n    // Date will show 1 day before the one requested if \"Hyphens\" are used, if a \"/\" is used it works.\n    return new Date(date.replace(/-/g, '\\/'));\n}\n\nfunction isTodayTaskFilter(date) {\n    return isToday(convertDate(date))\n}\n\nfunction isThisWeekTaskFilter(date) {\n    // Week starts on Monday\n    return isThisWeek(convertDate(date), { weekStartsOn: 1 })\n}","import filterTasks from \"../Features/filterTasks\";\n\n// Check where the User is currently located in the Website.\nexport default function taskSectionSelected(section) {\n\n    switch (section) {\n        case \"All Tasks\":\n            filterTasks().allTasks();\n            break\n        case \"Today\":\n            filterTasks().todayTask();\n            break\n        case \"This Week\":\n            filterTasks().thisWeekTask();\n            break\n        case \"Urgent\":\n            filterTasks().urgentTasks();\n            break\n        case \"Completed\":\n            filterTasks().completedTasks();\n            break\n    }\n\n}","import { tasksList } from \"../..\";\nimport reAssignIndex from \"./reAssignIndex\";\nimport createTaskDOM from \"../DOM/createTaskDOM\";\n\n// Function to filter the Projects depending on the Criteria.\nexport default function filterProjects(project) {\n    filterAndCreateProject(task => task.project == project);\n}\n\nfunction filterAndCreateProject(filter) {\n    reAssignIndex(tasksList);\n    filterList(tasksList, filter).forEach(task => {\n        createTaskDOM(task.index, task.name, task.dueDate, task.completed);\n    });\n}\n\nfunction filterList(array, criteria) {\n    return array.filter(criteria);\n}","import taskSectionSelected from \"./taskSectionSelected\";\nimport filterProjects from \"../Features/filterProjects\";\n\n// Check where the User is located in the Tasks Section to display the Tasks Available.\nexport default function checkCurrentTaskSectionTitle() {\n\n    const contentTitle = document.querySelector(\"#main_content_section_main_title\");\n    taskSectionSelected(contentTitle.dataset.title);\n    filterProjects(contentTitle.dataset.title);\n}","// Function to clear all Tasks in the Main Section before showing the new Tasks.\nexport default function clearMainSectionContent() {\n    const currentContent = document.querySelector(\"#main_content_section_task_list_container\");\n    currentContent.textContent = \"\";\n}","import { tasksList, projectsList } from \"../..\";\n\n// Function to storage the items in the Local Storage with the Web Storage API.\nexport function storeDataInLocalStorage() {\n\n    function storeTask(task) {\n        let transformTaskObjectToString = JSON.stringify(task)\n        localStorage.setItem(`Task ${task.index}`, transformTaskObjectToString);\n    }\n\n    function storeProject(project) {\n        let transformProjectObjectToString = JSON.stringify(project);\n        localStorage.setItem(`Project ${project.index}`, transformProjectObjectToString);\n    }\n\n    return { storeTask, storeProject }\n};\n\n// Function to modify/recreate the items in the Local Storage with the Web Storage API.\nexport function modifyDataInLocalStorage() {\n\n    function recreateAllKeys() {\n        localStorage.clear();\n        tasksList.forEach(task => storeDataInLocalStorage().storeTask(task));\n        projectsList.forEach(project => storeDataInLocalStorage().storeProject(project));\n    }\n\n    return { recreateAllKeys }\n}\n\n// Function to retrieve the items in the Local Storage with the Web Storage API.\nexport function retrieveAllDataInLocalStorage() {\n\n    if (localStorage.length) {\n        for (let i = 0; i < localStorage.length; i++) {\n            if (localStorage.key(i).startsWith(\"Task\")) {\n                const transformStringToTaskObject = JSON.parse(localStorage.getItem(localStorage.key(i)));\n                tasksList.push(transformStringToTaskObject);\n            } else if (localStorage.key(i).startsWith(\"Project\")) {\n                const transformStringToProjectObject = JSON.parse(localStorage.getItem(localStorage.key(i)));\n                projectsList.push(transformStringToProjectObject);\n            }\n        }   \n    }\n        \n}","import BtnEventsListeners from \"./BtnEventsListeners\";\nimport { tasksList } from \"../..\";\nimport reAssignIndex from \"./reAssignIndex\";\nimport checkCurrentTaskSectionTitle from \"../DOM/checkCurrentTaskSectionTitle\";\nimport clearMainSectionContent from \"../DOM/clearMainSectionContent\";\nimport { storeDataInLocalStorage } from \"./DataInLocalStorage\";\n\n// Function to create the Task Object.\nfunction createNewTask() {    \n\n    class Task {\n        constructor(name, description, project, dueDate, priority) {\n            this.name = name;\n            this.description = description;\n            this.project = project;\n            this.dueDate = dueDate;\n            this.priority = priority\n            this.completed = false;\n            this.index = \"\";\n        }\n    }\n\n    const taskFormElements = {\n        name: document.querySelector(\"#new_task_name\"),\n        description: document.querySelector(\"#new_task_description\"),\n        project: document.querySelector(\"#new_task_project\"),\n        dueDate: document.querySelector(\"#new_task_due_date\"),\n        priority: document.querySelector(\"#new_task_priority\")\n    };\n\n    function rejectBlankValues() {\n        for (let key in taskFormElements) {\n            if (taskFormElements[key].value.trim() === \"\" || \n                taskFormElements[key].value.trim() === \"default\") {\n                alert(`The ${key} field cannot be blank.`);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Create New Task\n    function addNewTaskToList() {\n\n        // Validate before adding a new task\n        if (!rejectBlankValues()) {\n            return;\n        }\n\n        const newTask = new Task(\n            taskFormElements.name.value,\n            taskFormElements.description.value,\n            taskFormElements.project.value,\n            taskFormElements.dueDate.value,\n            taskFormElements.priority.value,\n        );\n\n        // Add New Task to the List\n        tasksList.push(newTask);\n\n        // Assign a new Index value, in case that a Task was deleted before.\n        reAssignIndex(tasksList);\n\n        // Add New Task to the Local Storage\n        storeDataInLocalStorage().storeTask(newTask);\n\n        // Clear DOM Current Content\n        clearMainSectionContent();\n\n        // Add Task to the DOM\n        checkCurrentTaskSectionTitle();\n\n        // Clear Current Information\n        clearCurrentForm();\n    }\n\n    // Clear Current Information from Form\n    function clearCurrentForm() {\n        taskFormElements.name.value = \"\";\n        taskFormElements.description.value = \"\";\n        taskFormElements.project.value = \"default\";\n        taskFormElements.dueDate.value = \"\";\n        taskFormElements.priority.value = \"default\";\n    }\n\n    return {\n        addNewTaskToList\n    };\n}\n\nconst newTask = createNewTask();\n\nBtnEventsListeners(\n    \"#add_new_todo_task_dialog\", \n    \"#add_new_todo_task_btn\", \n    \"#new_task_create_btn\",\n    newTask.addNewTaskToList\n);\n\nexport default newTask;\n","import createIcons from \"./createIcons\";\nimport createElementDOM from \"./createElementDOM\";\n\n// Function to create the Project into the DOM.\nexport default function createProjectDOM(index, name) {\n\n    const projectList = document.querySelector(\"#left_side_navbar_second_project_list\");\n\n    const newElement = createElementDOM();\n\n    // Project Main Container\n    const projectContainer = newElement.createElementWithClasses(\"li\", [\n        \"left_side_navbar_list_all_titles\",\n        \"left_side_navbar_list_titles\",\n        \"icon_text_center\",\n        \"left_side_navbar_second_list_titles\",\n        \"left_side_navbar_second_list_project\",\n        \"current_option\",\n        \"flex\"\n        ]\n    );\n    newElement.assignAttributes(projectContainer, {\n        id: name + \"-\" + index,\n        \"data-index\": index,\n        \"data-name\": name + \"-\" + index,\n        \"data-title\": name\n        }\n    );\n\n        // Project Title\n    const projectTitle = newElement.createElementWithClasses(\"p\", [\n        \"left_side_navbar_task_title\",\n        \"pointer\"\n        ]\n    );\n    projectTitle.textContent = name;\n    newElement.assignAttributes(projectTitle, {\n        \"data-name\": name + \"-\" + index,\n        \"data-title\": name,\n        \"data-type\": \"Project Container\"\n        }\n    );\n\n        // Icons Container\n    const iconsContainer = newElement.createElementWithClasses(\"div\", [\n        \"left_side_navbar_second_list_icons_container\",\n        \"flex\"\n        ]\n    );\n    newElement.assignAttributes(iconsContainer, {\n        \"data-name\": name + \"-\" + index,\n        \"data-title\": name\n        }        \n    );\n\n            // Append Icons to Container\n    const editBtnID = \"editBtn\" + \"_\" + name + \"_\" + index;\n    const editDataIcon = \"edit\";\n    const deleteBtnID = \"deleteBtn\" + \"_\" + name + \"_\" + index;\n    const delDataIcon = \"delete\";\n\n    const editIcons = createIcons(editBtnID, editDataIcon, index, name);\n    const delIcons = createIcons(deleteBtnID, delDataIcon, index, name);\n\n    newElement.assignAttributes(editIcons.editSvg, {\n        id: editBtnID,\n        \"data-icon\": editDataIcon,\n        \"data-index\": index,\n        \"data-name\": name\n    });\n    newElement.assignAttributes(delIcons.deleteSvg, {\n        id: deleteBtnID,\n        \"data-icon\": delDataIcon,\n        \"data-index\": index,\n        \"data-name\": name\n    });\n    iconsContainer.appendChild(editIcons.editSvg);\n    iconsContainer.appendChild(delIcons.deleteSvg);\n\n            // Append Project Content to Project Container\n    projectContainer.appendChild(projectTitle);\n    projectContainer.appendChild(iconsContainer);\n\n            // Append Project to Project List\n    projectList.appendChild(projectContainer);\n}\n","import BtnEventsListeners from \"./BtnEventsListeners\";\nimport createProjectDOM from \"../DOM/createProjectDOM\";\nimport { projectsList } from \"../..\";\nimport clearMainSectionContent from \"../DOM/clearMainSectionContent\";\nimport reAssignIndex from \"./reAssignIndex\";\nimport checkCurrentTaskSectionTitle from \"../DOM/checkCurrentTaskSectionTitle\";\nimport { storeDataInLocalStorage } from \"./DataInLocalStorage\";\n\n// Function to create the Project Object.\nfunction createNewProject() {\n\n    const addNewProjectField = document.querySelector(\"#add_new_project_title\")\n\n    class Project {\n        constructor (name) {\n            this.name = name;\n            this.index = \"\";\n        }\n    }\n    \n    // Create New Project\n    function addNewProjectToList() {\n\n        // Validate before adding a new task\n        if (!rejectBlankValue(addNewProjectField)) {\n            return;\n        }\n\n        const newProject = new Project(\n            `${addNewProjectField.value}`\n        )\n\n        // Add New Project to the List\n        projectsList.push(newProject);\n\n        // Assign a new Index value, in case that a Project was deleted before.\n        reAssignIndex(projectsList);\n\n        // Add New Project to the Local Storage\n        storeDataInLocalStorage().storeProject(newProject);\n\n        // Clear DOM Current Content\n        clearMainSectionContent();\n\n        // Add Task to the DOM\n        checkCurrentTaskSectionTitle();\n\n        // Clear Current Information\n        clearCurrentForm(addNewProjectField);\n\n        // Add Project to the Project DOM List\n        createProjectDOM(newProject.index, newProject.name);\n    }\n\n    return { addNewProjectToList }\n}\n\nfunction rejectBlankValue(field) {\n    if (field.value.trim() == \"\") {\n        alert(\"The Project Name field cannot be blank.\");\n        clearCurrentForm(field);\n        return false\n    } else if (!rejectDuplicateProjectNames(field.value)) {\n        alert(\"The Project Name already exists, try again.\");\n        clearCurrentForm(field);\n        return false\n    }\n    return true\n}\n\nfunction rejectDuplicateProjectNames(name) {\n    for (let key in projectsList) {\n        if (projectsList[key].name === name) {\n            return false\n        }\n    }\n    return true\n}\n\n// Clear Current Information\nfunction clearCurrentForm(field) {\n    field.value = \"\";\n}\n\nconst newProject = createNewProject();\n\nBtnEventsListeners(\n    \"#add_new_project_dialog\",\n    \"#add_new_todo_project_btn\",\n    \"#new_project_create_btn\",\n    newProject.addNewProjectToList\n);\n\nexport default newProject;","// Function to replace the Main Section title when a Navigation button was clicked.\nexport default function changeCurrentTitle(name) {\n    const contentTitle = document.querySelector(\"#main_content_section_main_title\");\n    contentTitle.textContent = name;\n    contentTitle.dataset.title = name;\n}","import taskSectionSelected from \"./taskSectionSelected\";\nimport clearMainSectionContent from \"./clearMainSectionContent\";\nimport changeCurrentTitle from \"./changeCurrentTitle\";\n\n// Function to modify the DOM content depending on the Task Feature pressed.\nexport default function replaceTasksContent() {\n    const leftSideNavbarBtns = [\n        \"#left_side_navbar_all_tasks_btn\",\n        \"#left_side_navbar_today_btn\",\n        \"#left_side_navbar_this_week_btn\",\n        \"#left_side_navbar_urgent_btn\",\n        \"#left_side_navbar_completed_btn\"\n    ]\n\n    leftSideNavbarBtns.forEach(btn => {\n        const button = document.querySelector(btn);\n        if (button) {\n            button.addEventListener(\"click\", (e) => {\n                const currentBtn = e.target.dataset.name;\n                changeCurrentTitle(currentBtn);\n                clearMainSectionContent();\n                taskSectionSelected(currentBtn);\n            })\n        }\n    })\n}","import { projectsList, tasksList } from \"../..\"\nimport createTaskDOM from \"./createTaskDOM\";\nimport createProjectDOM from \"./createProjectDOM\";\nimport { retrieveAllDataInLocalStorage } from \"../Features/DataInLocalStorage\";\n\n// Show All Available Tasks in the Project/Tasks Array when the Webpage loads.\nexport default function webpageLoads() {\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        retrieveAllDataInLocalStorage();\n        showAllTasksInArray();\n    })\n}\n// Function to show all Available Tasks in the DOM.\nfunction showAllTasksInArray() {\n    for (const i in tasksList) {\n        createTaskDOM(i, tasksList[i].name, tasksList[i].dueDate, tasksList[i].completed);\n    }\n    for (const i in projectsList) {\n        createProjectDOM(i, projectsList[i].name);\n    }\n}","// Modify the Edit/Delete Project Modal DOM\nexport default function handleProjectModals() {\n    function editModalInfo(projectName, index) {\n        const projectModalMainTitle = document.querySelector(\"#edit_project_dialog_main_title\");\n        const EditProjectName = document.querySelector(\"#edit_project_name\");\n        const inputPlaceHolder = document.querySelector(\"#edit_project_title\");\n        const confirmEditButton = document.querySelector(\"#edit_project_create_btn\");\n\n        projectModalMainTitle.textContent = \"Edit Project \" + `\"` + projectName + `\"`;\n        projectModalMainTitle.dataset.name = \"edit\";\n        EditProjectName.textContent = \"Edit the Project Name: \";\n        inputPlaceHolder.placeholder = projectName;\n        inputPlaceHolder.dataset.projectId = index;\n        inputPlaceHolder.dataset.projectName = projectName;\n        confirmEditButton.textContent = \"Edit Project\";\n    }\n\n    function deleteModalInfo(projectName, index) {\n        const projectModalMainTitle = document.querySelector(\"#edit_project_dialog_main_title\");\n        const confirmName = document.querySelector(\"#edit_project_name\");\n        const inputPlaceHolder = document.querySelector(\"#edit_project_title\");\n        const confirmDeleteButton = document.querySelector(\"#edit_project_create_btn\");\n\n        projectModalMainTitle.textContent = \"Do you want to delete \" + `\"` + projectName + `\"` + \"?\";\n        projectModalMainTitle.dataset.name = \"delete\";\n        confirmName.textContent = \"Confirm the Project Name: \";\n        inputPlaceHolder.dataset.projectId = index;\n        inputPlaceHolder.dataset.projectName = projectName;\n        confirmDeleteButton.textContent = \"Delete Project\";\n    }\n\n    function clearModalValues() {\n        const inputValue = document.querySelector(\"#edit_project_title\");\n        inputValue.value = \"\";\n    }\n\n    return { editModalInfo, deleteModalInfo, clearModalValues }\n}","// Function to remove all the projects in the DOM before showing the new ones.\nexport default function clearProjectSection() {    \n    const projectListSection = document.querySelector(\"#left_side_navbar_second_project_list\");\n    projectListSection.textContent = \"\";\n}","import handleProjectModals from \"../DOM/handleProjectModals\";\nimport { projectsList, tasksList } from \"../..\";\nimport reAssignIndex from \"./reAssignIndex\";\nimport createProjectDOM from \"../DOM/createProjectDOM\";\nimport clearProjectSection from \"../DOM/clearProjectSection\";\nimport changeCurrentTitle from \"../DOM/changeCurrentTitle\";\nimport checkCurrentTaskSectionTitle from \"../DOM/checkCurrentTaskSectionTitle\";\nimport clearMainSectionContent from \"../DOM/clearMainSectionContent\";\n\n// Function to apply the Project Changes depending on which button was pressed.\nexport default function manageProjectBtns() {\n\n    function checkButtonPressed(e) {\n\n        const projectSelected = e.target;\n        const btnAction = projectSelected.dataset.icon;\n        const projectIndex = projectSelected.dataset.index;\n        const projectName = projectSelected.dataset.name;\n        \n        const modal = document.querySelector(\"#edit_project_dialog\");\n        const projectModalHandler = handleProjectModals();\n        \n        if (btnAction === \"edit\") {\n            projectModalHandler.editModalInfo(projectName, projectIndex);\n            modal.showModal();\n        } else if (btnAction === \"delete\") {\n            projectModalHandler.deleteModalInfo(projectName, projectIndex);\n            modal.showModal(); \n        }\n    }\n\n    // Function to check what is the Current Project Modal Open\n    function checkProjectModalInUsed() {\n        const projectModalMainTitle = document.querySelector(\"#edit_project_dialog_main_title\").dataset.name;\n        const projectIndex = document.querySelector(\"#edit_project_title\").dataset.projectId;\n        const projectName = document.querySelector(\"#edit_project_title\").dataset.projectName;\n        if (projectModalMainTitle == \"edit\") {\n            editBtn(projectIndex, projectName)\n        } else if (projectModalMainTitle == \"delete\") {\n            delBtn(projectIndex, projectName);\n        }\n    }\n    return { checkButtonPressed, checkProjectModalInUsed }\n}\n\n\nfunction editBtn(index, oldProjectName) {\n    const newProjectName = document.querySelector(\"#edit_project_title\").value;\n    editProject(findProject(index), newProjectName);\n    modifyTaskProject(findTask(oldProjectName), newProjectName);\n}\n\nfunction editProject(projectIndex, newProjectName) {\n    projectsList[projectIndex].name = newProjectName;\n    resetProjectList();\n    returnToMainPage();\n}\n\nfunction modifyTaskProject(filter, newProjectName) {\n    filter.forEach(task => task.project = newProjectName)\n}\n\nfunction delBtn(index, name) {\n    const projectNameConfirm = document.querySelector(\"#edit_project_title\").value\n    if (projectNameConfirm == \"DELETE\") {\n        deleteProject(findProject(index));\n        unassignTaskProject(findTask(name));\n    } else {\n        alert(\"Type DELETE to confirm.\");\n    }\n}\n\nfunction deleteProject(projectIndex) {\n    projectsList.splice(projectIndex, 1);\n    // Reset Projects\n    resetProjectList();\n    returnToMainPage();\n}\n\nfunction unassignTaskProject(filter)  {\n    return filter.forEach(task => task.project = \"No Project Folder Assigned\")\n}\n\nfunction findProject(pIndex) {\n    return projectsList.findIndex(project => project.index === pIndex);\n}\n\nfunction findTask(pName) {\n    return tasksList.filter((task => task.project == pName))    \n}\n\nfunction resetProjectList() {\n    reAssignIndex(projectsList);\n    // Clear existing projects\n    clearProjectSection();\n    projectsList.forEach(project => {\n        createProjectDOM(project.index, project.name);\n    });\n}\n\nfunction returnToMainPage() {\n    changeCurrentTitle(\"All Tasks\");\n    clearMainSectionContent();\n    checkCurrentTaskSectionTitle();\n}","import clearMainSectionContent from \"./clearMainSectionContent\";\nimport changeCurrentTitle from \"./changeCurrentTitle\";\nimport filterProjects from \"../Features/filterProjects\";\n\n// Function to show in the DOM the Tasks that are linked to a Project Folder.\nexport default function showTasksInProject(e) {\n    if (e.target.dataset.type == \"Project Container\") {\n        const currentProject = e.target.dataset.title;\n        changeCurrentTitle(currentProject);\n        clearMainSectionContent();\n        filterProjects(currentProject);\n    }\n}","import manageProjectBtns from \"../Features/manageProjecBtns\";\nimport handleProjectModals from \"./handleProjectModals\";\nimport clickingOutsideModals from \"../Features/clickingOutsideModals\";\nimport showTasksInProject from \"./showTasksinProject\";\nimport { modifyDataInLocalStorage } from \"../Features/DataInLocalStorage\";\n\n// Function to apply the Project changes requested depending on the button pressed.\nexport default function projectBtnsHandler() {\n\n    const projectBtns = manageProjectBtns();\n    const modal = document.querySelector(\"#edit_project_dialog\");\n    const projectModalHandler = handleProjectModals();\n    const newProjectInput = document.querySelector(\"#edit_project_title\");\n\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        const projectListSection = document.querySelector(\"#left_side_navbar_second_project_list\");\n\n        projectListSection.addEventListener(\"click\", e => {\n            // Open the Modal depending on the button pressed.\n            projectBtns.checkButtonPressed(e);\n            showTasksInProject(e);\n        });\n    });\n\n    // Apply the action and close the modal when the Edit/Delete Button is pressed.\n    document.querySelector(\"#edit_project_create_btn\").addEventListener(\"click\", () => {\n        if (newProjectInput.value.trim() !== \"\" ) {\n            // Depending on the Modal used, the action will be applied.\n            projectBtns.checkProjectModalInUsed();\n            modal.close();\n            projectModalHandler.clearModalValues();\n            // Recreate all Keys in the Local Storage\n            modifyDataInLocalStorage().recreateAllKeys();\n        } else {\n            alert(\"Please enter a valid Value\");\n        }\n    });\n    // Allow the user to close the Modal when clicking outside it.\n    document.querySelector(\"#edit_project_dialog\").addEventListener(\"click\", (e) => {\n        clickingOutsideModals().closeModal(e, modal);\n    })\n}","import { tasksList } from \"../..\";\n\n// Function to edit the Tasks Modal Information depending on the button pressed.\nexport default function handleTaskModals() {\n\n    function editTaskModalInfo(taskName, taskindex) {\n        const editTaskModalMainTitle = document.querySelector(\"#edit_task_dialog_main_title\");\n        const editTaskModalBtn = document.querySelector(\"#edit_task_btn\");\n        const taskInArray =  tasksList[findTaskIndex(taskindex)];\n\n        const currenTaskValues = {\n            name: taskInArray.name,\n            description: taskInArray.description,\n            project: taskInArray.project,\n            dueDate: taskInArray.dueDate,\n            priority: taskInArray.priority\n        }\n        const editModalValues = {\n            name: document.querySelector(\"#edit_task_name\"),\n            description: document.querySelector(\"#edit_task_description\"),\n            project: document.querySelector(\"#edit_task_project\"),\n            dueDate: document.querySelector(\"#edit_task_due_date\"),\n            priority: document.querySelector(\"#edit_task_priority\")\n        };\n\n        editTaskModalMainTitle.textContent = \"Edit Task \" + `\"` + taskName + `\"`;\n        editTaskModalBtn.dataset.index = taskindex;\n\n        // Show the current Task Value to make the edit process easier.\n        editModalValues.name.value = currenTaskValues.name;\n        editModalValues.description.value = currenTaskValues.description;\n        editModalValues.project.value = currenTaskValues.project;\n        editModalValues.dueDate.value = currenTaskValues.dueDate;\n        editModalValues.priority.value = currenTaskValues.priority;\n    }\n    \n    function deleteTaskModalInfo(taskName, taskindex) {\n        const deleteTaskModalMainTitle = document.querySelector(\"#delete_task_dialog_main_title\");\n        const confirmName = document.querySelector(\"#delete_task_name\");\n        const confirmDeleteButton = document.querySelector(\"#delete_task_btn\");\n\n        deleteTaskModalMainTitle.textContent = \"Do you want to delete \" + `\"` + taskName + `\"` + \"?\";\n        confirmName.textContent = \"Confirm the delete: \";\n        confirmDeleteButton.textContent = \"Delete Task\";\n        confirmDeleteButton.dataset.index = taskindex;\n    }\n\n    function infoTaskModalInfo(task) {\n        const infoTaskModal = document.querySelector(\"#info_task_dialog_main_title\");\n\n        const infoTaskValues = {\n            name: document.querySelector(\"#task_info_dialog_task_name\"),\n            description: document.querySelector(\"#task_info_dialog_task_description\"),\n            project: document.querySelector(\"#task_info_dialog_task_project\"),\n            dueDate: document.querySelector(\"#task_info_dialog_task_due_date\"),\n            priority: document.querySelector(\"#task_info_dialog_task_priority\"),\n            status: document.querySelector(\"#task_info_dialog_task_status\")\n        };\n\n        infoTaskModal.textContent = task.name;\n        \n        infoTaskValues.name.textContent = task.name;\n        infoTaskValues.description.textContent = task.description;\n        infoTaskValues.project.textContent = task.project;\n        // Change the Date Format in the Modal Information \n        infoTaskValues.dueDate.textContent = changeDateFormat(task.dueDate);\n        infoTaskValues.priority.textContent = task.priority;\n        // Change the Task Status Name in the Modal Information \n        infoTaskValues.status.textContent = checkTaskStatus(task.completed);\n    }\n\n    function clearEditModalInfo() {\n        \n        const editTaskModalValues = {\n            name: document.querySelector(\"#edit_task_name\"),\n            description: document.querySelector(\"#edit_task_description\"),\n            project: document.querySelector(\"#edit_task_project\"),\n            dueDate: document.querySelector(\"#edit_task_due_date\"),\n            priority: document.querySelector(\"#edit_task_priority\"),\n        }\n\n        editTaskModalValues.name.value = \"\";\n        editTaskModalValues.description.value = \"\";\n        editTaskModalValues.project.value = \"\";\n        editTaskModalValues.dueDate.value = \"\";\n        editTaskModalValues.priority.value= \"default\";\n    }\n\n    function clearDeleteModalInfo() {\n        const confirmDeleteInput = document.querySelector(\"#delete_task_input\");\n        confirmDeleteInput.value = \"\";\n    }\n\n    return { deleteTaskModalInfo, editTaskModalInfo, clearEditModalInfo, clearDeleteModalInfo, infoTaskModalInfo }\n}\n\nfunction checkTaskStatus(status) {\n    if (status) {\n        return \"Completed\"\n    } else {\n        return \"Pending\"\n    }\n}\n\n// Change the Date format to show a more user-friendly Date.\nfunction changeDateFormat(date) {\n    return new Date(date).toDateString();\n}\n\nfunction findTaskIndex(tIndex) {\n    return tasksList.findIndex(task => task.index === tIndex);\n}","import handleTaskModals from \"../DOM/handleTaskModals\";\nimport showProjectsAvailable from \"../DOM/showProjectsAvailable\";\nimport { tasksList } from \"../..\";\nimport taskCompleteStatus from \"./TaskCompleteStatus\";\nimport checkCurrentTaskSectionTitle from \"../DOM/checkCurrentTaskSectionTitle\";\nimport clearMainSectionContent from \"../DOM/clearMainSectionContent\";\nimport { modifyDataInLocalStorage } from \"./DataInLocalStorage\";\n\n// Function to apply the Task Change depending on the button pressed.\nexport default function manageTaskBtns() {\n\n    const taskModals = handleTaskModals();\n    const taskStatus = taskCompleteStatus();\n\n    function checkTaskButtonPressed(e) {\n\n        const taskSelected = e.target;\n        const btnAction = taskSelected.dataset.icon;\n        const taskName = taskSelected.dataset.name;\n        const taskIndex = taskSelected.dataset.index;\n        \n        const editModal = document.querySelector(\"#edit_task_dialog\");\n        const deleteModal = document.querySelector(\"#delete_task_dialog\");\n        const infoTaskModal = document.querySelector(\"#task_info_dialog\");\n        \n        if (btnAction === \"edit\") {\n            // Show Available Projects in Edit Task Modal\n            showProjectsAvailable(\"#edit_task_project\");\n            taskModals.editTaskModalInfo(taskName, taskIndex);\n            editModal.showModal();\n        } else if (btnAction === \"delete\") {\n            taskModals.deleteTaskModalInfo(taskName, taskIndex);\n            deleteModal.showModal();\n        } else if (btnAction === \"info\") {\n            const task = findTaskInfo(taskIndex);\n            taskModals.infoTaskModalInfo(task);\n            infoTaskModal.showModal();\n        } else if (btnAction === \"checkbox\") {\n            const task = findTaskInfo(taskIndex);\n            taskStatus.changeTaskStatus(task);\n            // Recreate all Keys in the Local Storage\n            modifyDataInLocalStorage().recreateAllKeys();\n            clearMainSectionContent();\n            checkCurrentTaskSectionTitle();\n        }\n    }\n\n    function editTaskBtn(e) {\n\n        const taskSelected = e.target;\n        const taskIndex = taskSelected.dataset.index;\n    \n        const taskInArray =  tasksList[findTaskIndex(taskIndex)];\n    \n        const newTaskValues = {\n            name: document.querySelector(\"#edit_task_name\"),\n            description: document.querySelector(\"#edit_task_description\"),\n            project: document.querySelector(\"#edit_task_project\"),\n            dueDate: document.querySelector(\"#edit_task_due_date\"),\n            priority: document.querySelector(\"#edit_task_priority\")\n        };\n\n        function rejectBlankValues() {\n            for (let key in newTaskValues) {\n                if (newTaskValues[key].value.trim() === \"\" || \n                    newTaskValues[key].value.trim() === \"default\") {\n                    alert(`The ${key} field cannot be blank.`);\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        if (!rejectBlankValues()) {\n            return\n        }\n    \n        taskInArray.name = newTaskValues.name.value;\n        taskInArray.description = newTaskValues.description.value;\n        taskInArray.project = newTaskValues.project.value;\n        taskInArray.dueDate = newTaskValues.dueDate.value;\n        taskInArray.priority = newTaskValues.priority.value;\n    }\n\n    function deleteTaskBtn(e) {\n        const taskSelected = e.target;\n        const taskIndex = taskSelected.dataset.index;\n\n        const confirmDeleteInput = document.querySelector(\"#delete_task_input\");\n\n        if (confirmDeleteInput.value == \"DELETE\") {\n            tasksList.splice(findTaskIndex(taskIndex), 1);\n            // Recreate all Keys in the Local Storage\n            modifyDataInLocalStorage().recreateAllKeys();\n        } else {\n            alert(\"Type DELETE to confirm.\");\n        }\n    }\n\n    return { checkTaskButtonPressed, editTaskBtn, deleteTaskBtn }\n}\n\nfunction findTaskIndex(tIndex) {\n    return tasksList.findIndex(task => task.index === tIndex);\n}\n\nfunction findTaskInfo(taskIndex) {\n    return tasksList.find(task => task.index === taskIndex);\n}\n","import manageTaskBtns from \"../Features/manageTaskBtns\";\nimport clickingOutsideModals from \"../Features/clickingOutsideModals\";\nimport reAssignIndex from \"../Features/reAssignIndex\";\nimport { tasksList } from \"../..\";\nimport checkCurrentTaskSectionTitle from \"./checkCurrentTaskSectionTitle\";\nimport clearMainSectionContent from \"./clearMainSectionContent\";\nimport handleTaskModals from \"../DOM/handleTaskModals\";\nimport { modifyDataInLocalStorage } from \"../Features/DataInLocalStorage\";\n\n// Function to apply the changes to the Task depending on the Task Button pressed.\nexport default function taskBtnsHandler() {\n\n    const taskBtns = manageTaskBtns();\n\n    const editTaskModal = document.querySelector(\"#edit_task_dialog\");\n    const deleteTaskModal = document.querySelector(\"#delete_task_dialog\");\n    const infoTaskModal = document.querySelector(\"#task_info_dialog\");\n\n    document.addEventListener(\"DOMContentLoaded\", function() {\n        const taskListSection = document.querySelector(\"#main_content_section_task_list_container\");\n        taskListSection.addEventListener(\"click\", e => {\n            // Open the Modal depending on which button was pressed\n            taskBtns.checkTaskButtonPressed(e);\n        });\n    });\n\n    // Apply the action and close the modal when the Edit Button is pressed\n    document.querySelector(\"#edit_task_btn\").addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        taskBtns.editTaskBtn(e);\n        reAssignIndex(tasksList);\n        // Recreate all Keys in the Local Storage\n        modifyDataInLocalStorage().recreateAllKeys();\n        // Close and clear the Modal\n        editTaskModal.close();\n        handleTaskModals().clearEditModalInfo();\n        // Recreate Tasks\n        clearMainSectionContent();\n        checkCurrentTaskSectionTitle();\n    });\n\n    // Apply the action and close the modal when the Delete Button is pressed\n    document.querySelector(\"#delete_task_btn\").addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        taskBtns.deleteTaskBtn(e);\n        reAssignIndex(tasksList);\n        // Recreate all Keys in the Local Storage\n        modifyDataInLocalStorage().recreateAllKeys();\n        // Close and clear the Modal\n        deleteTaskModal.close();\n        handleTaskModals().clearDeleteModalInfo();\n        // Recreate Tasks\n        clearMainSectionContent();\n        checkCurrentTaskSectionTitle();\n    });\n\n    // Apply the action and close the modal when the Info Button is pressed\n    document.querySelector(\"#info_task_btn\").addEventListener(\"click\", (e) => {\n        infoTaskModal.close();\n    });\n\n\n    // Allow the user to close the Modal when clicking outside it.\n    editTaskModal.addEventListener(\"click\", (e) => {\n        clickingOutsideModals().closeModal(e, editTaskModal);\n    })\n    deleteTaskModal.addEventListener(\"click\", (e) => {\n        clickingOutsideModals().closeModal(e, deleteTaskModal);\n    })\n    infoTaskModal.addEventListener(\"click\", (e) => {\n        clickingOutsideModals().closeModal(e, infoTaskModal);\n    })\n}","\n// Function to Show or Close the Sidebar for Mobile View.\nexport default function manageMobileViewSidebar() {\n\n    const sidebarCheckbox = document.querySelector(\"#show_navbar_checkbox\");\n\n    sidebarCheckbox.addEventListener(\"click\", () => {\n        checkCheckboxStatus(sidebarCheckbox);\n    });\n}\n\nfunction checkCheckboxStatus(checkbox) {\n    const navBarSection = document.querySelector(\"#left_side_navbar_section\");\n\n    if (checkbox.checked) {\n        navBarSection.classList.remove(\"sidebar_clicked_closed\")\n        navBarSection.classList.add(\"sidebar_clicked_open\")\n    } else {\n        navBarSection.classList.remove(\"sidebar_clicked_open\")\n        navBarSection.classList.add(\"sidebar_clicked_closed\")\n    }\n}","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","// JS Modules\nimport newTask from './scripts/Features/createNewTask';\nimport newProject from './scripts/Features/createNewProject';\nimport replaceTasksContent from './scripts/DOM/replaceTasksContent';\nimport webpageLoads from './scripts/DOM/DOMLoads';\nimport projectBtnsHandler from './scripts/DOM/projectBtnsHandler';\nimport taskBtnsHandler from './scripts/DOM/taskBtnsHandler';\nimport manageMobileViewSidebar from './scripts/Features/manageMobileViewSidebar';\n\n// CSS Files\nimport './style.css';\n\n\n// Lists Container\nexport const tasksList = [];\nexport const projectsList = [];\n\n// Create a New Task\nconst newTaskElement = newTask;\n\n// Edit/Delete/Info an Existing Task\nconst taskBtns = taskBtnsHandler();\n\n// Create a New Project\nconst newProjectElement = newProject;\n\n// Edit/Delete an Existing Project\nconst projectBtns = projectBtnsHandler();\n\n// Function to Show the Content Selected\nconst changeTasksDOMContent = replaceTasksContent();\n\n// Function to show or Hide the Sidebar for Mobile View\nconst showSidebar = manageMobileViewSidebar();\n\n// Show All Stored Tasks in the Array when the Webpage loads\nconst loadWebpage = webpageLoads();"],"names":[],"sourceRoot":""}